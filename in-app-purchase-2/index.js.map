{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/in-app-purchase-2/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,iCAAiC,CAAC;AAiFjE;IAAwC,sCAAc;IAAtD;;IA6HA,CAAC;IAhEG;;;OAGG;IACH,gCAAG,GAAH,UAAI,SAAiB;QACjB,IAAI,QAAoB,CAAC;QACzB,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,kCAAK,GAAL,UAAM,OAAiB,IAAU,CAAC;IAAA,CAAC;IACnC;;;OAGG;IACH,qCAAQ,GAAR,UAAS,OAA0B,IAAU,CAAC;IAAA,CAAC;IAC/C;;;;;;OAMG;IACH,iCAAI,GAAJ,UAAK,KAA0B,EAAE,KAAc,EAAE,QAA2B;QACxE,IAAI,QAA0B,CAAC;QAC/B,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAAA,CAAC;IACF;;;;;;OAMG;IACH,iCAAI,GAAJ,UAAK,KAA0B,EAAE,KAAc,EAAE,QAA2B;QACxE,IAAI,QAA0B,CAAC;QAC/B,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,gCAAG,GAAH,UAAI,QAAkB,IAAU,CAAC;IAAA,CAAC;IAClC,4EAA4E;IAC5E,gDAAgD;IAChD,6BAA6B;IAC7B,iBAAiB;IACjB,0BAA0B;IAC1B,2BAA2B;IAC3B,KAAK;IACL,kCAAK,GAAL,UAAM,OAA4B,EAAE,cAAoB,IAA0C,MAAM,CAAC,CAAC,CAAC;IAE3G;;;OAGG;IACH,kCAAK,GAAL;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF,oCAAO,GAAP,cAAkB,CAAC;IAAA,CAAC;IACxB,yBAAC;AAAD,CA7HA,AA6HC,CA7HuC,cAAc,GA6HrD","file":"index.js","sourceRoot":"","sourcesContent":["import { InAppPurchase2 } from '@ionic-native/in-app-purchase-2';\r\n\r\nexport interface IAPProductOptions {\r\n    id: string;\r\n    alias: string;\r\n    type: string;\r\n}\r\nexport declare type IAPProducts = Array<IAPProduct> & {\r\n    /**\r\n     * Get product by ID\r\n     */\r\n    byId: {\r\n        [id: string]: IAPProduct;\r\n    };\r\n    /**\r\n     * Get product by alias\r\n     */\r\n    byAlias: {\r\n        [alias: string]: IAPProduct;\r\n    };\r\n    /**\r\n     * Remove all products (for testing only).\r\n     */\r\n    reset: () => {};\r\n};\r\nexport declare type IAPQueryCallback = ((product: IAPProduct) => void) | ((error: IAPError) => void);\r\nexport interface IAPProduct {\r\n    id: string;\r\n    alias: string;\r\n    type: string;\r\n    state: string;\r\n    title: string;\r\n    description: string;\r\n    priceMicros: string;\r\n    price: string;\r\n    currency: string;\r\n    loaded: boolean;\r\n    valid: boolean;\r\n    canPurchase: boolean;\r\n    owned: boolean;\r\n    downloading: boolean;\r\n    downloaded: boolean;\r\n    additionalData: any;\r\n    transaction: any;\r\n    finish(): void;\r\n    verify(): any;\r\n    set(key: string, value: any): void;\r\n    stateChanged(): void;\r\n    on(event: string, callback: Function): void;\r\n    once(event: string, callback: Function): void;\r\n    off(callback: Function): void;\r\n    trigger(action: string, args: any): void;\r\n}\r\nexport interface IAPProductEvents {\r\n    loaded: (callback: IAPQueryCallback) => void;\r\n    updated: (callback: IAPQueryCallback) => void;\r\n    error: (callback: IAPQueryCallback) => void;\r\n    approved: (callback: IAPQueryCallback) => void;\r\n    owned: (callback: IAPQueryCallback) => void;\r\n    cancelled: (callback: IAPQueryCallback) => void;\r\n    refunded: (callback: IAPQueryCallback) => void;\r\n    registered: (callback: IAPQueryCallback) => void;\r\n    valid: (callback: IAPQueryCallback) => void;\r\n    invalid: (callback: IAPQueryCallback) => void;\r\n    requested: (callback: IAPQueryCallback) => void;\r\n    initiated: (callback: IAPQueryCallback) => void;\r\n    finished: (callback: IAPQueryCallback) => void;\r\n    verified: (callback: IAPQueryCallback) => void;\r\n    unverified: (callback: IAPQueryCallback) => void;\r\n    expired: (callback: IAPQueryCallback) => void;\r\n    downloading: (product: IAPProduct, progress: any, time_remaining: any) => void;\r\n    downloaded: (callback: IAPQueryCallback) => void;\r\n}\r\n/**\r\n * @hidden\r\n */\r\nexport declare class IAPError {\r\n    code: number;\r\n    message: string;\r\n}\r\n\r\nexport class InAppPurchase2Mock extends InAppPurchase2 {\r\n    QUIET: number;\r\n    ERROR: number;\r\n    WARNING: number;\r\n    INFO: number;\r\n    DEBUG: number;\r\n    /**\r\n     * Debug level. Use QUIET, ERROR, WARNING, INFO or DEBUG constants\r\n     */\r\n    verbosity: number;\r\n    /**\r\n     * Set to true to invoke the platform purchase sandbox. (Windows only)\r\n     */\r\n    sandbox: boolean;\r\n    FREE_SUBSCRIPTION: string;\r\n    PAID_SUBSCRIPTION: string;\r\n    NON_RENEWING_SUBSCRIPTION: string;\r\n    CONSUMABLE: string;\r\n    NON_CONSUMABLE: string;\r\n    ERR_SETUP: number;\r\n    ERR_LOAD: number;\r\n    ERR_PURCHASE: number;\r\n    ERR_LOAD_RECEIPTS: number;\r\n    ERR_CLIENT_INVALID: number;\r\n    ERR_PAYMENT_CANCELLED: number;\r\n    ERR_PAYMENT_INVALID: number;\r\n    ERR_PAYMENT_NOT_ALLOWED: number;\r\n    ERR_UNKNOWN: number;\r\n    ERR_REFRESH_RECEIPTS: number;\r\n    ERR_INVALID_PRODUCT_ID: number;\r\n    ERR_FINISH: number;\r\n    ERR_COMMUNICATION: number;\r\n    ERR_SUBSCRIPTIONS_NOT_AVAILABLE: number;\r\n    ERR_MISSING_TOKEN: number;\r\n    ERR_VERIFICATION_FAILED: number;\r\n    ERR_BAD_RESPONSE: number;\r\n    ERR_REFRESH: number;\r\n    ERR_PAYMENT_EXPIRED: number;\r\n    ERR_DOWNLOAD: number;\r\n    ERR_SUBSCRIPTION_UPDATE_NOT_AVAILABLE: number;\r\n    REGISTERED: string;\r\n    INVALID: string;\r\n    VALID: string;\r\n    REQUESTED: string;\r\n    INITIATED: string;\r\n    APPROVED: string;\r\n    FINISHED: string;\r\n    OWNED: string;\r\n    DOWNLOADING: string;\r\n    DOWNLOADED: string;\r\n    INVALID_PAYLOAD: number;\r\n    CONNECTION_FAILED: number;\r\n    PURCHASE_EXPIRED: number;\r\n    products: IAPProducts;\r\n    validator: string | ((product: string | IAPProduct, callback: Function) => void);\r\n    log: {\r\n        error: (message: string) => void;\r\n        warn: (message: string) => void;\r\n        info: (message: string) => void;\r\n        debug: (message: string) => void;\r\n    };\r\n    /**\r\n     * Get product by id or alias\r\n     * @param idOrAlias\r\n     */\r\n    get(idOrAlias: string): IAPProduct {\r\n        let response: IAPProduct;\r\n        return response;\r\n    };\r\n    /**\r\n     * Register error handler\r\n     * @param onError {Function} function to call on error\r\n     */\r\n    error(onError: Function): void { };\r\n    /**\r\n     * Add or register a product\r\n     * @param product {IAPProductOptions}\r\n     */\r\n    register(product: IAPProductOptions): void { };\r\n    /**\r\n     *\r\n     * @param query\r\n     * @param event\r\n     * @param callback\r\n     * @return {IAPProductEvents}\r\n     */\r\n    when(query: string | IAPProduct, event?: string, callback?: IAPQueryCallback): IAPProductEvents {\r\n        let response: IAPProductEvents;\r\n        return response;\r\n    };\r\n    /**\r\n     * Identical to `when`, but the callback will be called only once. After being called, the callback will be unregistered.\r\n     * @param query {string | IAPProduct}\r\n     * @param [event] {event}\r\n     * @param [callback] {IAPQueryCallback}\r\n     * @return {IAPProductEvents}\r\n     */\r\n    once(query: string | IAPProduct, event?: string, callback?: IAPQueryCallback): IAPProductEvents {\r\n        let response: IAPProductEvents;\r\n        return response;\r\n    };\r\n    /**\r\n     * Unregister a callback. Works for callbacks registered with ready, when, once and error.\r\n     * @param callback {Function}\r\n     */\r\n    off(callback: Function): void { };\r\n    // order(product: string | IAPProduct, additionalData?: any): Promise<any> {\r\n    //     return new Promise((resolve, reject) => {\r\n    //         resolve().error();\r\n    //     }).then();\r\n    //     //  then: Function;\r\n    //     //  error: Function;\r\n    // };\r\n    order(product: string | IAPProduct, additionalData?: any): { then: Function; error: Function; } { return; }\r\n\r\n    /**\r\n     *\r\n     * @return {Promise<any>} returns a promise that resolves when the store is ready\r\n     */\r\n    ready(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    refresh(): void { };\r\n}\r\n"]}
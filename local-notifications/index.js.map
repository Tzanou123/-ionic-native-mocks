{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/local-notifications/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,kBAAkB,EAAE,MAAM,mCAAmC,CAAC;AACvE,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAmV7C;IAA6C,2CAAkB;IAA/D;;IAiQA,CAAC;IAhQC;;;OAGG;IACH,0CAAQ,GAAR,UAAS,OAAwD,IAAS,CAAC;IAC3E;;;OAGG;IACH,wCAAM,GAAN,UAAO,OAA4B,IAAS,CAAC;IAC7C;;;;OAIG;IACH,uCAAK,GAAL,UAAM,cAAmB;QACvB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,OAAO,EAAE,CAAC;QACZ,CAAC,CAAC,CAAC;IACL,CAAC;IACD;;;OAGG;IACH,0CAAQ,GAAR;QACE,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,OAAO,EAAE,CAAC;QACZ,CAAC,CAAC,CAAC;IACL,CAAC;IACD;;;;OAIG;IACH,wCAAM,GAAN,UAAO,cAAmB;QACxB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,OAAO,EAAE,CAAC;QACZ,CAAC,CAAC,CAAC;IACL,CAAC;IACD;;;OAGG;IACH,2CAAS,GAAT;QACE,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,OAAO,EAAE,CAAC;QACZ,CAAC,CAAC,CAAC;IACL,CAAC;IACD;;;;OAIG;IACH,2CAAS,GAAT,UAAU,cAAsB;QAC9B,IAAI,QAAiB,CAAC;QACtB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC;IACD;;;;OAIG;IACH,6CAAW,GAAX,UAAY,cAAsB;QAChC,IAAI,QAAiB,CAAC;QACtB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC;IACD;;;;OAIG;IACH,6CAAW,GAAX,UAAY,cAAsB;QAChC,IAAI,QAAiB,CAAC;QACtB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC;IACD;;;OAGG;IACH,wCAAM,GAAN;QACE,IAAI,QAAQ,GAAkB,EAAE,CAAC;QACjC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC;IACD;;;OAGG;IACH,iDAAe,GAAf;QACE,IAAI,QAAQ,GAAkB,EAAE,CAAC;QACjC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC;IACD;;;OAGG;IACH,iDAAe,GAAf;QACE,IAAI,QAAQ,GAAkB,EAAE,CAAC;QACjC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC;IACD;;;;OAIG;IACH,qCAAG,GAAH,UAAI,cAAmB;QACrB,IAAI,QAA4B,CAAC;QACjC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC;IACD;;;OAGG;IACH,wCAAM,GAAN;QACE,IAAI,QAAQ,GAA8B,EAAE,CAAC;QAC7C,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC;IACD;;;OAGG;IACH,iDAAe,GAAf;QACE,IAAI,QAAQ,GAA8B,EAAE,CAAC;QAC7C,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC;IACD;;;OAGG;IACH,iDAAe,GAAf;QACE,IAAI,QAAQ,GAA8B,EAAE,CAAC;QAC7C,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC;IACD;;;OAGG;IACH,oDAAkB,GAAlB;QACE,IAAI,QAAiB,CAAC;QACtB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC;IACD;;;OAGG;IACH,+CAAa,GAAb;QACE,IAAI,QAAiB,CAAC;QACtB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC;IACD;;;;;OAKG;IACH,4CAAU,GAAV,UACE,OAAY,EACZ,OAAwC;QAExC,IAAI,QAAyC,CAAC;QAC9C,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC;IACD;;;;OAIG;IACH,+CAAa,GAAb,UAAc,OAAY;QACxB,IAAI,QAAa,CAAC;QAClB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC;IACD;;;;OAIG;IACH,4CAAU,GAAV,UAAW,OAAY;QACrB,IAAI,QAAiB,CAAC;QACtB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC;IACD;;;OAGG;IACH,6CAAW,GAAX;QACE,IAAI,QAAa,CAAC;QAClB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC;IACD;;;OAGG;IACH,6CAAW,GAAX,UAAY,QAAa;QACvB,IAAI,QAAa,CAAC;QAClB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC;IACD;;;;OAIG;IACH,oCAAE,GAAF,UAAG,SAAiB;QAClB,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,QAAuB;YAC/C,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAClB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACtB,CAAC,CAAC,CAAC;IACL,CAAC;IACD;;;;OAIG;IACH,2CAAS,GAAT,UAAU,SAAiB,EAAE,IAAS,IAAS,CAAC;IAChD;;;OAGG;IACH,kDAAgB,GAAhB;QACE,IAAI,QAAa,CAAC;QAClB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC;IACH,8BAAC;AAAD,CAjQA,AAiQC,CAjQ4C,kBAAkB,GAiQ9D","file":"index.js","sourceRoot":"","sourcesContent":["import { LocalNotifications } from \"@ionic-native/local-notifications\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Observer } from \"rxjs/Observer\";\r\n\r\nexport declare enum ELocalNotificationTriggerUnit {\r\n  SECOND = \"second\",\r\n  MINUTE = \"minute\",\r\n  HOUR = \"hour\",\r\n  DAY = \"day\",\r\n  WEEK = \"week\",\r\n  MONTH = \"month\",\r\n  QUARTER = \"quarter\",\r\n  YEAR = \"year\",\r\n  WEEKDAY = \"weekday\",\r\n  WEEKDAY_ORDINAL = \"weekdayOrdinal\",\r\n  WEEK_OF_MONTH = \"weekOfMonth\"\r\n}\r\nexport interface ILocalNotificationTrigger {\r\n  /** ***** FIX ***** */\r\n  /**\r\n   * The date and time when the system should deliver the local notification. If the specified value is nil or is a date in the past, the local notification is delivered immediately.\r\n   * Default: now ~ new Date()\r\n   */\r\n  at?: Date;\r\n  /** ***** TIMESPAN ***** */\r\n  /**\r\n   * Amount of units\r\n   */\r\n  in?: number;\r\n  /**\r\n   * Unit\r\n   */\r\n  unit?: ELocalNotificationTriggerUnit;\r\n  /** ***** REPEAT/MATCH ***** */\r\n  /**\r\n   * Amount of units\r\n   */\r\n  count?: number;\r\n  /**\r\n   * The unit\r\n   */\r\n  every?: ELocalNotificationTriggerUnit;\r\n  /**\r\n   * The end of the repeating notification\r\n   */\r\n  before?: Date;\r\n  /**\r\n   * The date and time when the system should deliver the local notification. If the specified value is nil or is a date in the past, the local notification is delivered immediately.\r\n   * Only for 'repeat'\r\n   * Default: now ~ new Date()\r\n   */\r\n  firstAt?: Date;\r\n  /**\r\n   * Only for 'match'\r\n   */\r\n  after?: Date;\r\n  /** ***** LOCATION ***** */\r\n  /**\r\n   * IOS ONLY\r\n   * Center of the location\r\n   * Latitude and Longitude values\r\n   */\r\n  center?: number[];\r\n  /**\r\n   * IOS ONLY\r\n   * Radius in meters\r\n   */\r\n  radius?: number;\r\n  /**\r\n   * IOS ONLY\r\n   * Trigger on entry of the location\r\n   */\r\n  notifyOnEntry?: boolean;\r\n  /**\r\n   * IOS ONLY\r\n   * Trigger on exit of the location\r\n   */\r\n  notifyOnExit?: boolean;\r\n  /**\r\n   * IOS ONLY\r\n   * Trigger only once?\r\n   */\r\n  single?: boolean;\r\n}\r\nexport declare enum ILocalNotificationActionType {\r\n  INPUT = \"input\",\r\n  BUTTON = \"button\"\r\n}\r\nexport interface ILocalNotificationAction {\r\n  /**\r\n   * The id of the action is used as the event name in the listener function\r\n   */\r\n  id?: string;\r\n  /**\r\n   * The title of the notification message\r\n   */\r\n  title?: string;\r\n  /**\r\n   * Specifies whether the action causes the app to launch in the foreground\r\n   */\r\n  launch?: boolean;\r\n  /**\r\n   * If the value is 'decline' the action is displayed with special highlighting to indicate that it performs a destructive task\r\n   */\r\n  ui?: string;\r\n  /**\r\n   * Specifies whether the action requires that the userâ€™s device be unlocked.\r\n   * When the user selects an action with this option, the system prompts\r\n   * the user to unlock the device\r\n   */\r\n  needsAuth?: boolean;\r\n  /**\r\n   * The resource path of the action icon\r\n   */\r\n  icon?: string;\r\n  /**\r\n   * The type of the action. If omitted 'button' is used.\r\n   */\r\n  type?: ILocalNotificationActionType;\r\n}\r\nexport interface ILocalNotificationProgressBar {\r\n  /**\r\n   * Is the progress bar enabled?\r\n   */\r\n  enabled?: boolean;\r\n  /**\r\n   * The current value\r\n   */\r\n  value?: number;\r\n  /**\r\n   * ANDROID ONLY\r\n   * The maximum value (default is 100)\r\n   */\r\n  maxValue?: number;\r\n  /**\r\n   * ANDROID ONLY\r\n   * Show an indeterminate progress bar\r\n   */\r\n  indeterminate?: boolean;\r\n  /**\r\n   * WINDOWS ONLY\r\n   * Gets or sets an optional string to be displayed instead of the\r\n   * default percentage string. If this isn't provided, something\r\n   * like '70%' will be displayed.\r\n   */\r\n  description?: string;\r\n  /**\r\n   * WINDOWS ONLY\r\n   * Sets the status (required), which is displayed underneath the progress bar\r\n   * on the left.\r\n   * This string should reflect the status of the operation,\r\n   * like 'Downloading...' or 'Installing...'\r\n   */\r\n  status?: string;\r\n}\r\nexport interface ILocalNotification {\r\n  /**\r\n   * A unique identifier required to clear, cancel, update or retrieve the local notification in the future\r\n   * Default: 0\r\n   */\r\n  id?: number;\r\n  /**\r\n   * First row of the notification\r\n   * Default: Empty string (iOS) or the app name (Android)\r\n   */\r\n  title?: string;\r\n  /**\r\n   * Second row of the notification\r\n   * Default: Empty string\r\n   */\r\n  text?: string | string[];\r\n  /**\r\n   * The number currently set as the badge of the app icon in Springboard (iOS) or at the right-hand side of the local notification (Android)\r\n   * Default: 0 (which means don't show a number)\r\n   */\r\n  badge?: number;\r\n  /**\r\n   * Uri of the file containing the sound to play when an alert is displayed\r\n   * Default: res://platform_default\r\n   */\r\n  sound?: string;\r\n  /**\r\n   * Arbitrary data, objects will be encoded to JSON string\r\n   * Default: null\r\n   */\r\n  data?: any;\r\n  /**\r\n   * ANDROID ONLY\r\n   * Uri of the icon that is shown in the ticker and notification\r\n   * Default: res://icon\r\n   */\r\n  icon?: string;\r\n  /**\r\n   * ANDROID ONLY\r\n   * Uri of the resource (only res://) to use in the notification layouts. Different classes of devices may return different sizes\r\n   * Default: res://ic_popup_reminder\r\n   */\r\n  smallIcon?: string;\r\n  /**\r\n   * ANDROID ONLY\r\n   * RGB value for the background color of the smallIcon.\r\n   * Default: Androids COLOR_DEFAULT, which will vary based on Android version.\r\n   */\r\n  color?: string;\r\n  /**\r\n   * ANDROID ONLY\r\n   * Use the default notification vibrate.\r\n   */\r\n  vibrate?: boolean;\r\n  /**\r\n   * ANDROID ONLY\r\n   * Define the blinking of the LED on the device.\r\n   * If set to true, the LED will blink in the default color with\r\n   * timings for on and off set to 1000 ms.\r\n   * If set to a string, the LED will blink in this ARGB value with\r\n   * timings for on and off set to 1000 ms.\r\n   * If set to an array, the value of the key 0 will be used as the color,\r\n   * the value of the key 1 will be used as the 'on' timing, the value of\r\n   * the key 2 will be used as the 'off' timing\r\n   */\r\n  led?:\r\n    | {\r\n        color: string;\r\n        on: number;\r\n        off: number;\r\n      }\r\n    | any[]\r\n    | boolean\r\n    | string;\r\n  /**\r\n   * Notification priority.\r\n   * Integers between -2 and 2, whereas -2 is minimum and 2 is maximum priority\r\n   */\r\n  priority?: number;\r\n  /**\r\n   * Is a silent notification\r\n   */\r\n  silent?: boolean;\r\n  /**\r\n   * Specifies whether the a click on the notification causes the app\r\n   * to launch in the foreground\r\n   */\r\n  launch?: boolean;\r\n  /**\r\n   * ANDROID ONLY\r\n   * Wakeup the device. (default is true)\r\n   */\r\n  wakeup?: boolean;\r\n  /**\r\n   * ANDROID ONLY\r\n   * Specifies a duration in milliseconds after which this notification should be canceled, if it is not already canceled.\r\n   */\r\n  timeoutAfter?: number | false;\r\n  /**\r\n   * Actions id or actions\r\n   */\r\n  actions?: string | ILocalNotificationAction[];\r\n  /**\r\n   * When to trigger the notification\r\n   */\r\n  trigger?: ILocalNotificationTrigger;\r\n  /**\r\n   * A list of image attachments\r\n   */\r\n  attachments?: string[];\r\n  /**\r\n   * ANDROID ONLY\r\n   * If and how the notification shall show the when date.\r\n   * Possbile values:\r\n   *                  boolean: true equals 'clock', false disable a watch/counter\r\n   *                  'clock': Show the when date in the content view\r\n   *                  'chronometer': Show a stopwatch\r\n   *\r\n   */\r\n  clock?: boolean | string;\r\n  /**\r\n   * Shows a progress bar\r\n   * Setting a boolean is a shortcut for {enabled: true/false} respectively\r\n   */\r\n  progressBar?: ILocalNotificationProgressBar | boolean;\r\n  /**\r\n   * ANDROID ONLY\r\n   * If multiple notifications have the same group your app can present\r\n   * them as a single group.\r\n   */\r\n  group?: string;\r\n  /**\r\n   * ANDROID ONLY\r\n   * If set to 'true' this notification could use 'summary' to summarize\r\n   * the contents of the whole group\r\n   */\r\n  groupSummary?: boolean;\r\n  /**\r\n   * ANDROID ONLY\r\n   * Summary of the whole notification group. Should be used in conjuntion\r\n   * with 'groupSummary' set to true\r\n   */\r\n  summary?: string;\r\n  /**\r\n   * ANDROID ONLY\r\n   * Sets the number of items this notification represents.\r\n   */\r\n  number?: number;\r\n  /**\r\n   * ANDROID ONLY\r\n   * Set whether this is an 'ongoing' notification.\r\n   * Ongoing notifications cannot be dismissed by the user,\r\n   * so your application or service must take care of canceling them.\r\n   */\r\n  sticky?: boolean;\r\n  /**\r\n   * ANDROID ONLY\r\n   * Make this notification automatically dismissed when the user touches it.\r\n   */\r\n  autoClear?: boolean;\r\n  /**\r\n   * ANDROID ONLY\r\n   * If set to true the notification will be show in its entirety on all lockscreens.\r\n   * If set to false it will not be revealed on a secure lockscreen.\r\n   */\r\n  lockscreen?: boolean;\r\n  /**\r\n   * ANDROID ONLY\r\n   * Set the default notification options that will be used.\r\n   * The value should be one or more of the following fields combined with\r\n   * bitwise-or: DEFAULT_SOUND, DEFAULT_VIBRATE, DEFAULT_LIGHTS.\r\n   */\r\n  defaults?: number;\r\n  /**\r\n   * ANDROID ONLY\r\n   * Specifies the channel the notification should be delivered on.\r\n   */\r\n  channel?: string;\r\n  /**\r\n   * ANDROID ONLY\r\n   * Set the token for the media session\r\n   */\r\n  mediaSession?: string;\r\n}\r\n\r\nexport class LocalNotificationsMocks extends LocalNotifications {\r\n  /**\r\n   * Schedules a single or multiple notifications\r\n   * @param options {Notification | Array<ILocalNotification>} optional\r\n   */\r\n  schedule(options?: ILocalNotification | Array<ILocalNotification>): void {}\r\n  /**\r\n   * Updates a previously scheduled notification. Must include the id in the options parameter.\r\n   * @param options {ILocalNotification} optional\r\n   */\r\n  update(options?: ILocalNotification): void {}\r\n  /**\r\n   * Clears single or multiple notifications\r\n   * @param notificationId {any} A single notification id, or an array of notification ids.\r\n   * @returns {Promise<any>} Returns a promise when the notification had been cleared\r\n   */\r\n  clear(notificationId: any): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      resolve();\r\n    });\r\n  }\r\n  /**\r\n   * Clears all notifications\r\n   * @returns {Promise<any>} Returns a promise when all notifications have cleared\r\n   */\r\n  clearAll(): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      resolve();\r\n    });\r\n  }\r\n  /**\r\n   * Cancels single or multiple notifications\r\n   * @param notificationId {any} A single notification id, or an array of notification ids.\r\n   * @returns {Promise<any>} Returns a promise when the notification is canceled\r\n   */\r\n  cancel(notificationId: any): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      resolve();\r\n    });\r\n  }\r\n  /**\r\n   * Cancels all notifications\r\n   * @returns {Promise<any>} Returns a promise when all notifications are canceled\r\n   */\r\n  cancelAll(): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      resolve();\r\n    });\r\n  }\r\n  /**\r\n   * Checks presence of a notification\r\n   * @param notificationId {number}\r\n   * @returns {Promise<boolean>}\r\n   */\r\n  isPresent(notificationId: number): Promise<boolean> {\r\n    let response: boolean;\r\n    return new Promise((resolve, reject) => {\r\n      resolve(response);\r\n    });\r\n  }\r\n  /**\r\n   * Checks is a notification is scheduled\r\n   * @param notificationId {number}\r\n   * @returns {Promise<boolean>}\r\n   */\r\n  isScheduled(notificationId: number): Promise<boolean> {\r\n    let response: boolean;\r\n    return new Promise((resolve, reject) => {\r\n      resolve(response);\r\n    });\r\n  }\r\n  /**\r\n   * Checks if a notification is triggered\r\n   * @param notificationId {number}\r\n   * @returns {Promise<boolean>}\r\n   */\r\n  isTriggered(notificationId: number): Promise<boolean> {\r\n    let response: boolean;\r\n    return new Promise((resolve, reject) => {\r\n      resolve(response);\r\n    });\r\n  }\r\n  /**\r\n   * Get all the notification ids\r\n   * @returns {Promise<Array<number>>}\r\n   */\r\n  getIds(): Promise<Array<number>> {\r\n    let response: Array<number> = [];\r\n    return new Promise((resolve, reject) => {\r\n      resolve(response);\r\n    });\r\n  }\r\n  /**\r\n   * Get the ids of triggered notifications\r\n   * @returns {Promise<Array<number>>}\r\n   */\r\n  getTriggeredIds(): Promise<Array<number>> {\r\n    let response: Array<number> = [];\r\n    return new Promise((resolve, reject) => {\r\n      resolve(response);\r\n    });\r\n  }\r\n  /**\r\n   * Get the ids of scheduled notifications\r\n   * @returns {Promise<Array<number>>} Returns a promise\r\n   */\r\n  getScheduledIds(): Promise<Array<number>> {\r\n    let response: Array<number> = [];\r\n    return new Promise((resolve, reject) => {\r\n      resolve(response);\r\n    });\r\n  }\r\n  /**\r\n   * Get a notification object\r\n   * @param notificationId {any} The id of the notification to get\r\n   * @returns {Promise<ILocalNotification>}\r\n   */\r\n  get(notificationId: any): Promise<ILocalNotification> {\r\n    let response: ILocalNotification;\r\n    return new Promise((resolve, reject) => {\r\n      resolve(response);\r\n    });\r\n  }\r\n  /**\r\n   * Get all notification objects\r\n   * @returns {Promise<Array<ILocalNotification>>}\r\n   */\r\n  getAll(): Promise<Array<ILocalNotification>> {\r\n    let response: Array<ILocalNotification> = [];\r\n    return new Promise((resolve, reject) => {\r\n      resolve(response);\r\n    });\r\n  }\r\n  /**\r\n   * Get all scheduled notification objects\r\n   * @returns {Promise<Array<ILocalNotification>>}\r\n   */\r\n  getAllScheduled(): Promise<Array<ILocalNotification>> {\r\n    let response: Array<ILocalNotification> = [];\r\n    return new Promise((resolve, reject) => {\r\n      resolve(response);\r\n    });\r\n  }\r\n  /**\r\n   * Get all triggered notification objects\r\n   * @returns {Promise<Array<ILocalNotification>>}\r\n   */\r\n  getAllTriggered(): Promise<Array<ILocalNotification>> {\r\n    let response: Array<ILocalNotification> = [];\r\n    return new Promise((resolve, reject) => {\r\n      resolve(response);\r\n    });\r\n  }\r\n  /**\r\n   * Register permission to show notifications if not already granted.\r\n   * @returns {Promise<boolean>}\r\n   */\r\n  registerPermission(): Promise<boolean> {\r\n    let response: boolean;\r\n    return new Promise((resolve, reject) => {\r\n      resolve(response);\r\n    });\r\n  }\r\n  /**\r\n   * Informs if the app has the permission to show notifications.\r\n   * @returns {Promise<boolean>}\r\n   */\r\n  hasPermission(): Promise<boolean> {\r\n    let response: boolean;\r\n    return new Promise((resolve, reject) => {\r\n      resolve(response);\r\n    });\r\n  }\r\n  /**\r\n   * Adds a group of actions\r\n   * @param groupId The id of the action group\r\n   * @param actions The actions of this group\r\n   * @returns {Promise<any>}\r\n   */\r\n  addActions(\r\n    groupId: any,\r\n    actions: Array<ILocalNotificationAction>\r\n  ): Promise<any> {\r\n    let response: Array<ILocalNotificationAction>;\r\n    return new Promise((resolve, reject) => {\r\n      resolve(response);\r\n    });\r\n  }\r\n  /**\r\n   * Removes a group of actions\r\n   * @param groupId The id of the action group\r\n   * @returns {Promise<any>}\r\n   */\r\n  removeActions(groupId: any): Promise<any> {\r\n    let response: any;\r\n    return new Promise((resolve, reject) => {\r\n      resolve(response);\r\n    });\r\n  }\r\n  /**\r\n   * Checks if a group of actions is defined\r\n   * @param groupId The id of the action group\r\n   * @returns {Promise<boolean>} Whether the group is defined\r\n   */\r\n  hasActions(groupId: any): Promise<boolean> {\r\n    let response: boolean;\r\n    return new Promise((resolve, reject) => {\r\n      resolve(response);\r\n    });\r\n  }\r\n  /**\r\n   * Gets the (platform specific) default settings.\r\n   * @returns {Promise<any>} An object with all default settings\r\n   */\r\n  getDefaults(): Promise<any> {\r\n    let response: any;\r\n    return new Promise((resolve, reject) => {\r\n      resolve(response);\r\n    });\r\n  }\r\n  /**\r\n   * Overwrites the (platform specific) default settings.\r\n   * @returns {Promise<any>}\r\n   */\r\n  setDefaults(defaults: any): Promise<any> {\r\n    let response: any;\r\n    return new Promise((resolve, reject) => {\r\n      resolve(response);\r\n    });\r\n  }\r\n  /**\r\n   * Sets a callback for a specific event\r\n   * @param eventName {string} The name of the event. Available events: schedule, trigger, click, update, clear, clearall, cancel, cancelall. Custom event names are possible for actions\r\n   * @return {Observable}\r\n   */\r\n  on(eventName: string): Observable<any> {\r\n    return Observable.create((observer: Observer<any>) => {\r\n      observer.next(\"\");\r\n      observer.complete();\r\n    });\r\n  }\r\n  /**\r\n   * Not an official interface, however its possible to manually fire events.\r\n   ** @param eventName The name of the event. Available events: schedule, trigger, click, update, clear, clearall, cancel, cancelall. Custom event names are possible for actions\r\n   * @param args Optional arguments\r\n   */\r\n  fireEvent(eventName: string, args: any): void {}\r\n  /**\r\n   * Fire queued events once the device is ready and all listeners are registered.\r\n   * @returns {Promise<any>}\r\n   */\r\n  fireQueuedEvents(): Promise<any> {\r\n    let response: any;\r\n    return new Promise((resolve, reject) => {\r\n      resolve(response);\r\n    });\r\n  }\r\n}\r\n"]}
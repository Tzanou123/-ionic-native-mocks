{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/native-geocoder/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,+BAA+B,CAAC;AAE/D;IAAwC,sCAAc;IAAtD;;IAwBA,CAAC;IAvBG;;;;;OAKG;IACH,2CAAc,GAAd,UAAe,QAAgB,EAAE,SAAiB,EAAE,OAA+B;QAC/E,IAAI,QAAuC,CAAC;QAC5C,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,0CAAa,GAAb,UAAc,aAAqB,EAAE,OAA+B;QAChE,IAAI,QAAuC,CAAC;QAC5C,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,yBAAC;AAAD,CAxBA,AAwBC,CAxBuC,cAAc,GAwBrD","file":"index.js","sourceRoot":"","sourcesContent":["import { NativeGeocoder } from '@ionic-native/native-geocoder';\r\n\r\nexport class NativeGeocoderMock extends NativeGeocoder {\r\n    /**\r\n     * Reverse geocode a given latitude and longitude to find location address\r\n     * @param latitude {number} The latitude\r\n     * @param longitude {number} The longitude\r\n     * @return {Promise<any>}\r\n     */\r\n    reverseGeocode(latitude: number, longitude: number, options?: NativeGeocoderOptions): Promise<NativeGeocoderReverseResult[]> {\r\n        let response: NativeGeocoderReverseResult[];\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Forward geocode a given address to find coordinates\r\n     * @param addressString {string} The address to be geocoded\r\n     * @return {Promise<any>}\r\n     */\r\n    orwardGeocode(addressString: string, options?: NativeGeocoderOptions): Promise<NativeGeocoderForwardResult[]> {\r\n        let response: NativeGeocoderForwardResult[];\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n}\r\n/**\r\n * Encapsulates format information about a reverse geocoding result.\r\n */\r\nexport interface NativeGeocoderReverseResult {\r\n    /**\r\n     * The country code.\r\n     */\r\n    countryCode: string;\r\n    /**\r\n     * The country name.\r\n     */\r\n    countryName: string;\r\n    /**\r\n     * The postal code.\r\n     */\r\n    postalCode: string;\r\n    /**\r\n     * The administrativeArea.\r\n     */\r\n    administrativeArea: string;\r\n    /**\r\n     * The subAdministrativeArea.\r\n     */\r\n    subAdministrativeArea: string;\r\n    /**\r\n     * The locality.\r\n     */\r\n    locality: string;\r\n    /**\r\n     * The subLocality.\r\n     */\r\n    subLocality: string;\r\n    /**\r\n     * The thoroughfare.\r\n     */\r\n    thoroughfare: string;\r\n    /**\r\n     * The subThoroughfare.\r\n     */\r\n    subThoroughfare: string;\r\n}\r\n/**\r\n * Encapsulates format information about a forward geocoding result.\r\n */\r\nexport interface NativeGeocoderForwardResult {\r\n    /**\r\n     * The latitude.\r\n     */\r\n    latitude: string;\r\n    /**\r\n     * The longitude.\r\n     */\r\n    longitude: string;\r\n}\r\n\r\nexport interface NativeGeocoderOptions {\r\n    /**\r\n     * The locale to use when returning the address information.\r\n     * If set to 'false' the locale will always be 'en_US'.\r\n     * Default is 'true'\r\n     */\r\n    useLocale: boolean;\r\n    /**\r\n     * The default locale to use when returning the address information.\r\n     * e.g.: 'fa-IR' or 'de_DE'.\r\n     */\r\n    defaultLocale?: string;\r\n    /**\r\n     * The maximum number of result to return (max is 5).\r\n     * Default is 1\r\n     */\r\n    maxResults: number;\r\n}\r\n"]}
{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/barcode-scanner/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,+BAA+B,CAAC;AAmD/D;IAAwC,sCAAc;IAAtD;;IAiCA,CAAC;IAzBG;;;;MAIE;IACF,iCAAI,GAAJ,UAAK,OAA+B;QAChC,IAAI,SAAS,GAAsB,EAAE,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC;QAE7F,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,SAAS,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;MAME;IACF,mCAAM,GAAN,UAAO,IAAY,EAAE,IAAS;QAC1B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IACL,yBAAC;AAAD,CAjCA,AAiCC,CAjCuC,cAAc,GAiCrD","file":"index.js","sourceRoot":"","sourcesContent":["import { BarcodeScanner } from '@ionic-native/barcode-scanner';\r\n\r\nexport interface BarcodeScannerOptions {\r\n    /**\r\n     * Prefer front camera. Supported on iOS and Android.\r\n     */\r\n    preferFrontCamera?: boolean;\r\n    /**\r\n     * Show flip camera button. Supported on iOS and Android.\r\n     */\r\n    showFlipCameraButton?: boolean;\r\n    /**\r\n     * Show torch button. Supported on iOS and Android.\r\n     */\r\n    showTorchButton?: boolean;\r\n    /**\r\n     * Disable animations. Supported on iOS only.\r\n     */\r\n    disableAnimations?: boolean;\r\n    /**\r\n     * Disable success beep. Supported on iOS only.\r\n     */\r\n    disableSuccessBeep?: boolean;\r\n    /**\r\n     * Prompt text. Supported on Android only.\r\n     */\r\n    prompt?: string;\r\n    /**\r\n     * Formats separated by commas. Defaults to all formats except `PDF_417` and `RSS_EXPANDED`.\r\n     */\r\n    formats?: string;\r\n    /**\r\n     * Orientation. Supported on Android only. Can be set to `portrait` or `landscape`. Defaults to none so the user can rotate the phone and pick an orientation.\r\n     */\r\n    orientation?: string;\r\n    /**\r\n     * Launch with the torch switched on (if available). Supported on Android only.\r\n     */\r\n    torchOn?: boolean;\r\n    /**\r\n     * Display scanned text for X ms. 0 suppresses it entirely, default 1500. Supported on Android only.\r\n     */\r\n    resultDisplayDuration?: number;\r\n}\r\n\r\nexport interface BarcodeScanResult {\r\n    format: 'QR_CODE' | 'DATA_MATRIX' | 'UPC_E' | 'UPC_A' | 'EAN_8' | 'EAN_13' | 'CODE_128' | 'CODE_39' | 'CODE_93' | 'CODABAR' | 'ITF' | 'RSS14' | 'RSS_EXPANDED' | 'PDF_417' | 'AZTEC' | 'MSI';\r\n    cancelled: boolean;\r\n    text: string;\r\n}\r\n\r\nexport class BarcodeScannerMock extends BarcodeScanner {\r\n    Encode: {\r\n        TEXT_TYPE: string;\r\n        EMAIL_TYPE: string;\r\n        PHONE_TYPE: string;\r\n        SMS_TYPE: string;\r\n    };\r\n\r\n    /**\r\n    * Open the barcode scanner.\r\n    * @param {BarcodeScannerOptions} [options] Optional options to pass to the scanner\r\n    * @returns {Promise<any>} Returns a Promise that resolves with scanner data, or rejects with an error.\r\n    */\r\n    scan(options?: BarcodeScannerOptions): Promise<BarcodeScanResult> {\r\n        let theResult: BarcodeScanResult = { format: 'QR_CODE', cancelled: false, text: 'RESPONSE' };\r\n\r\n        return new Promise((resolve, reject) => {\r\n            resolve(theResult);\r\n        });\r\n    }\r\n\r\n    /**\r\n    * Encodes data into a barcode.\r\n    * NOTE: not well supported on Android\r\n    * @param {string} type Type of encoding\r\n    * @param {any} data Data to encode\r\n    * @returns {Promise<any>}\r\n    */\r\n    encode(type: string, data: any): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    }\r\n}\r\n"]}
{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/google-play-games-services/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,uBAAuB,EAAE,MAAM,0CAA0C,CAAC;AA8DnF;IAAiD,+CAAuB;IAAxE;;IA0HA,CAAC;IAzHG;;;;;OAKG;IACH,0CAAI,GAAJ;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,6CAAO,GAAP;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,gDAAU,GAAV;QACI,IAAI,QAA0B,CAAC;QAC/B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;OAKG;IACH,gDAAU,GAAV;QACI,IAAI,QAAgB,CAAC;QACrB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;;OAOG;IACH,iDAAW,GAAX,UAAY,IAAe;QACvB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;OAMG;IACH,yDAAmB,GAAnB;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;;OAOG;IACH,qDAAe,GAAf,UAAgB,IAAqB;QACjC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;OAMG;IACH,uDAAiB,GAAjB,UAAkB,IAAqB;QACnC,IAAI,QAAQ,GAAW,EAAE,CAAC;QAC1B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;OAMG;IACH,0DAAoB,GAApB,UAAqB,IAAkC;QACnD,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;OAMG;IACH,sDAAgB,GAAhB;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,kCAAC;AAAD,CA1HA,AA0HC,CA1HgD,uBAAuB,GA0HvE","file":"index.js","sourceRoot":"","sourcesContent":["import { GooglePlayGamesServices } from '@ionic-native/google-play-games-services';\r\n\r\nexport interface ScoreData {\r\n    /**\r\n     * The score to submit.\r\n     */\r\n    score: number;\r\n    /**\r\n     * The leaderboard ID from Google Play Developer console.\r\n     */\r\n    leaderboardId: string;\r\n}\r\nexport interface LeaderboardData {\r\n    /**\r\n     * The leaderboard ID from Goole Play Developer console.\r\n     */\r\n    leaderboardId: string;\r\n}\r\nexport interface AchievementData {\r\n    /**\r\n     * The achievement ID from Google Play Developer console.\r\n     */\r\n    achievementId: string;\r\n}\r\nexport interface IncrementableAchievementData extends AchievementData {\r\n    /**\r\n     * The amount to increment the achievement by.\r\n     */\r\n    numSteps: number;\r\n}\r\nexport interface SignedInResponse {\r\n    /**\r\n     * True or false is the use is signed in.\r\n     */\r\n    isSignedIn: boolean;\r\n}\r\nexport interface Player {\r\n    /**\r\n     * The players display name.\r\n     */\r\n    displayName: string;\r\n    /**\r\n     * The ID given to the player by Play Games Services.\r\n     */\r\n    playerId: string;\r\n    /**\r\n     * The title of the player based on their gameplay activity. Not\r\n     * all players have this and it may change over time.\r\n     */\r\n    title: string | null;\r\n    /**\r\n     * Retrieves the URI for loading this player's icon-size profile image.\r\n     * Returns null if the player has no profile image.\r\n     */\r\n    iconImageUrl: string;\r\n    /**\r\n     * Retrieves the URI for loading this player's hi-res profile image. Returns\r\n     * null if the player has no profile image.\r\n     */\r\n    hiResIconImageUrl: string;\r\n}\r\n\r\nexport class GooglePlayGamesServicesMock extends GooglePlayGamesServices {\r\n    /**\r\n     * Initialise native Play Games Service login procedure.\r\n     *\r\n     * @return {Promise<any>} Returns a promise that resolves when the player\r\n     * is authenticated with Play Games Services.\r\n     */\r\n    auth(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Sign out of Google Play Games Services.\r\n     *\r\n     * @return {Promise<any>} Returns a promise that resolve when the player\r\n     * successfully signs out.\r\n     */\r\n    signOut(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Check if the user is signed in.\r\n     *\r\n     * @return {Promise<SignedInResponse>} Returns a promise that resolves with\r\n     * the signed in response.\r\n     */\r\n    isSignedIn(): Promise<SignedInResponse> {\r\n        let response: SignedInResponse;\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Show the currently authenticated player.\r\n     *\r\n     * @return {Promise<Player>} Returns a promise that resolves when Play\r\n     * Games Services returns the authenticated player.\r\n     */\r\n    showPlayer(): Promise<Player> {\r\n        let response: Player;\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Submit a score to a leaderboard. You should ensure that you have a\r\n     * successful return from auth() before submitting a score.\r\n     *\r\n     * @param data {ScoreData} The score data you want to submit.\r\n     * @return {Promise<any>} Returns a promise that resolves when the\r\n     * score is submitted.\r\n     */\r\n    submitScore(data: ScoreData): Promise<string> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Launches the native Play Games leaderboard view controller to show all the\r\n     * leaderboards.\r\n     *\r\n     * @return {Promise<any>} Returns a promise that resolves when the native\r\n     * leaderboards window opens.\r\n     */\r\n    showAllLeaderboards(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Launches the native Play Games leaderboard view controll to show the\r\n     * specified leaderboard.\r\n     *\r\n     * @param data {LeaderboardData} The leaderboard you want to show.\r\n     * @return {Promise<any>} Returns a promise that resolves when the native\r\n     * leaderboard window opens.\r\n     */\r\n    showLeaderboard(data: LeaderboardData): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Unlock an achievement.\r\n     *\r\n     * @param data {AchievementData}\r\n     * @return {Promise<any>} Returns a promise that resolves when the\r\n     * achievement is unlocked.\r\n     */\r\n    unlockAchievement(data: AchievementData): Promise<string> {\r\n        let response: string = '';\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Increment an achievement.\r\n     *\r\n     * @param data {IncrementableAchievementData}\r\n     * @return {Promise<any>} Returns a promise that resolves when the\r\n     * achievement is incremented.\r\n     */\r\n    incrementAchievement(data: IncrementableAchievementData): Promise<string> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n    /**\r\n     * Lauches the native Play Games achievements view controller to show\r\n     * achievements.\r\n     *\r\n     * @return {Promise<any>} Returns a promise that resolves when the\r\n     * achievement window opens.\r\n     */\r\n    showAchievements(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve();\r\n        });\r\n    };\r\n}\r\n"]}
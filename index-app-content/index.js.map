{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/index-app-content/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,iCAAiC,CAAC;AAClE,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAsB7C;IAAyC,uCAAe;IAAxD;;IA8DA,CAAC;IA7DG;;;;OAIG;IACH,iDAAmB,GAAnB;QACI,IAAI,QAAiB,CAAC;QACtB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,sCAAQ,GAAR,UAAS,KAAuB;QAC5B,IAAI,QAAa,CAAC;QAClB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,2CAAa,GAAb;QACI,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,QAAuB;YAC7C,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAClB,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,kDAAoB,GAApB,UAAqB,OAAsB;QACvC,IAAI,QAAa,CAAC;QAClB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,sDAAwB,GAAxB,UAAyB,WAA0B;QAC/C,IAAI,QAAa,CAAC;QAClB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,iDAAmB,GAAnB,UAAoB,eAAuB,IAAS,CAAC;IAAA,CAAC;IAC1D,0BAAC;AAAD,CA9DA,AA8DC,CA9DwC,eAAe,GA8DvD","file":"index.js","sourceRoot":"","sourcesContent":["import { IndexAppContent } from '@ionic-native/index-app-content';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Observer } from 'rxjs/Observer';\r\n\r\nexport interface IndexItem {\r\n    domain: string;\r\n    identifier: string;\r\n    title: string;\r\n    description: string;\r\n    /**\r\n     * Url to image\r\n     */\r\n    url: string;\r\n    /**\r\n     * Item keywords\r\n     */\r\n    keywords?: Array<string>;\r\n    /**\r\n     * Lifetime in minutes\r\n     */\r\n    lifetime?: number;\r\n}\r\n\r\nexport class IndexAppContentMock extends IndexAppContent {\r\n    /**\r\n     * The option to index app content might not be available at all due to device limitations or user settings.\r\n     * Therefore it's highly recommended to check upfront if indexing is possible.\r\n     * @return {Promise<boolean>} Returns a promise that resolves with true if indexing is available, false if not\r\n     */\r\n    isIndexingAvailable(): Promise<boolean> {\r\n        let response: boolean;\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Add or change items to spotlight index\r\n     * @param {Array<IndexItem>} Array of items to index\r\n     * @return {Promise<any>} Returns if index set was successfull\r\n     */\r\n    setItems(items: Array<IndexItem>): Promise<any> {\r\n        let response: any;\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * If user taps on a search result in spotlight then the app will be launched.\r\n     * You can register a Javascript handler to get informed when this happens.\r\n     * @returns {Observable<any>} returns an observable that notifies you when he user presses on the home screen icon\r\n     */\r\n    onItemPressed(): Observable<any> {\r\n        return Observable.create((observer: Observer<any>) => {\r\n            observer.next('');\r\n            observer.complete();\r\n        });\r\n    };\r\n    /**\r\n     * Clear all items stored for a given array of domains\r\n     * @param {Array<string>} Array of domains to clear\r\n     * @return {Promise<any>} Resolve if successfull\r\n     */\r\n    clearItemsForDomains(domains: Array<string>): Promise<any> {\r\n        let response: any;\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Clear all items stored for a given array of identifiers\r\n     * @param {Array<string>} Array of identifiers to clear\r\n     * @return {Promise<any>} Resolve if successfull\r\n     */\r\n    clearItemsForIdentifiers(identifiers: Array<string>): Promise<any> {\r\n        let response: any;\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * You might want to avoid to update spotlight index too frequently.\r\n     * Without calling this function a subsequent call to manipulate the index is only possible after 1440 minutes (= 24 hours)!\r\n     * @param {number} Numeric value => 0\r\n     */\r\n    setIndexingInterval(intervalMinutes: number): void {};\r\n}\r\n"]}
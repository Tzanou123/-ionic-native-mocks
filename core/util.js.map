{"version":3,"sources":["../../../src/@ionic-native-mocks/core/util.ts"],"names":[],"mappings":"AAEA;;GAEG;AACH,MAAM,CAAC,IAAM,GAAG,GAAG,UAAC,OAAyB,EAAE,IAAY;IACzD,IAAM,KAAK,GAAa,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACxC,IAAI,GAAG,GAAQ,OAAO,CAAC;IACvB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QAC9C,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACT,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QACD,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACtB,CAAC;IACD,MAAM,CAAC,GAAG,CAAC;AACb,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,IAAM,UAAU,GAAG,UAAC,QAAkB;IAC3C,IAAM,gBAAgB,GAAG;QACvB,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;gBACjC,QAAQ,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YAC5B,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,OAAO,CAAC,KAAK,CACX,0LAA0L,CAC3L,CAAC;QACJ,CAAC;IACH,CAAC,CAAC;IAEF,MAAM,CAAC,gBAAgB,EAAE,CAAC;AAC5B,CAAC,CAAC;AAEF;;;;GAIG;AACH,MAAM,CAAC,IAAM,SAAS,GAAG,UAAC,SAAiB;IACzC,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;AAChC,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,IAAM,UAAU,GAAG,UACxB,UAAkB,EAClB,MAAe,EACf,MAAe;IAEf,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QACX,OAAO,CAAC,IAAI,CACV,wBAAwB;YACtB,UAAU;YACV,GAAG;YACH,MAAM;YACN,YAAY;YACZ,UAAU;YACV,2BAA2B,CAC9B,CAAC;IACJ,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,OAAO,CAAC,IAAI,CACV,kCAAgC,UAAU,oCAAiC,CAC5E,CAAC;IACJ,CAAC;IACD,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QACX,OAAO,CAAC,IAAI,CACV,iBAAe,UAAU,4CAAuC,MAAM,MAAG,CAC1E,CAAC;IACJ,CAAC;AACH,CAAC,CAAC;AAEF;;;;GAIG;AACH,MAAM,CAAC,IAAM,WAAW,GAAG,UAAC,UAAkB,EAAE,MAAe;IAC7D,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QACX,OAAO,CAAC,IAAI,CACV,wBAAwB;YACtB,UAAU;YACV,GAAG;YACH,MAAM;YACN,8FAA8F,CACjG,CAAC;IACJ,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,OAAO,CAAC,IAAI,CACV,8BAA8B;YAC5B,UAAU;YACV,oGAAoG,CACvG,CAAC;IACJ,CAAC;AACH,CAAC,CAAC","file":"util.js","sourceRoot":"","sourcesContent":["declare const window: any;\r\n\r\n/**\r\n * @private\r\n */\r\nexport const get = (element: Element | Window, path: string): any => {\r\n  const paths: string[] = path.split('.');\r\n  let obj: any = element;\r\n  for (let i: number = 0; i < paths.length; i++) {\r\n    if (!obj) {\r\n      return null;\r\n    }\r\n    obj = obj[paths[i]];\r\n  }\r\n  return obj;\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nexport const getPromise = (callback: Function): Promise<any> => {\r\n  const tryNativePromise = () => {\r\n    if (window.Promise) {\r\n      return new Promise((resolve, reject) => {\r\n        callback(resolve, reject);\r\n      });\r\n    } else {\r\n      console.error(\r\n        'No Promise support or polyfill found. To enable Ionic Native support, please add the es6-promise polyfill before this script, or run with a library like Angular or on a recent browser.'\r\n      );\r\n    }\r\n  };\r\n\r\n  return tryNativePromise();\r\n};\r\n\r\n/**\r\n * @private\r\n * @param pluginRef\r\n * @returns {null|*}\r\n */\r\nexport const getPlugin = (pluginRef: string): any => {\r\n  return get(window, pluginRef);\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nexport const pluginWarn = (\r\n  pluginName: string,\r\n  plugin?: string,\r\n  method?: string\r\n): void => {\r\n  if (method) {\r\n    console.warn(\r\n      'Native: tried calling ' +\r\n        pluginName +\r\n        '.' +\r\n        method +\r\n        ', but the ' +\r\n        pluginName +\r\n        ' plugin is not installed.'\r\n    );\r\n  } else {\r\n    console.warn(\r\n      `'Native: tried accessing the ${pluginName} plugin but it's not installed.`\r\n    );\r\n  }\r\n  if (plugin) {\r\n    console.warn(\r\n      `Install the ${pluginName}  plugin: 'ionic cordova plugin add ${plugin}'`\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * @private\r\n * @param pluginName\r\n * @param method\r\n */\r\nexport const cordovaWarn = (pluginName: string, method?: string): void => {\r\n  if (method) {\r\n    console.warn(\r\n      'Native: tried calling ' +\r\n        pluginName +\r\n        '.' +\r\n        method +\r\n        ', but Cordova is not available. Make sure to include cordova.js or run in a device/simulator'\r\n    );\r\n  } else {\r\n    console.warn(\r\n      'Native: tried accessing the ' +\r\n        pluginName +\r\n        ' plugin but Cordova is not available. Make sure to include cordova.js or run in a device/simulator'\r\n    );\r\n  }\r\n};\r\n"]}
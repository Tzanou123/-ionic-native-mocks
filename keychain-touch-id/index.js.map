{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/keychain-touch-id/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,iCAAiC,CAAC;AAElE;IAAyC,uCAAe;IAAxD;;IAgEA,CAAC;IA/DG;;;OAGG;IACH,yCAAW,GAAX;QACI,IAAI,QAAa,CAAC;QAClB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;OAMG;IACH,kCAAI,GAAJ,UAAK,GAAW,EAAE,QAAgB;QAC9B,IAAI,QAAa,CAAC;QAClB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;;;OAMG;IACH,oCAAM,GAAN,UAAO,GAAW,EAAE,OAAe;QAC/B,IAAI,QAAa,CAAC;QAClB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,iCAAG,GAAH,UAAI,GAAW;QACX,IAAI,QAAa,CAAC;QAClB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,oCAAM,GAAN,UAAO,GAAW;QACd,IAAI,QAAa,CAAC;QAClB,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,uCAAS,GAAT,UAAU,MAAc,IAAS,CAAC;IAAA,CAAC;IACvC,0BAAC;AAAD,CAhEA,AAgEC,CAhEwC,eAAe,GAgEvD","file":"index.js","sourceRoot":"","sourcesContent":["import { KeychainTouchId } from '@ionic-native/keychain-touch-id';\r\n\r\nexport class KeychainTouchIdMock extends KeychainTouchId {\r\n    /**\r\n     * Check if Touch ID / Fingerprint is supported by the device\r\n     * @return {Promise<any>} Returns a promise that resolves when there is hardware support\r\n     */\r\n    isAvailable(): Promise<any> {\r\n        let response: any;\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Encrypts and Saves a password under the key in the device keychain, which can be retrieved after\r\n     * successful authentication using fingerprint\r\n     * @param key {string} the key you want to store\r\n     * @param password {string} the password you want to encrypt and store\r\n     * @return {Promise<any>} Returns a promise that resolves when there is a result\r\n     */\r\n    save(key: string, password: string): Promise<any> {\r\n        let response: any;\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Opens the fingerprint dialog, for the given key, showing an additional message. Promise will resolve\r\n     * with the password stored in keychain or will resolve an error code, where -1 indicated not available.\r\n     * @param key {string} the key you want to retrieve from keychain\r\n     * @param message {string} a message to the user\r\n     * @return {Promise<any>} Returns a promise that resolves when the key value is successfully retrieved or an error\r\n     */\r\n    verify(key: string, message: string): Promise<any> {\r\n        let response: any;\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Checks if there is a password stored within the keychain for the given key.\r\n     * @param key {string} the key you want to check from keychain\r\n     * @return {Promise<any>} Returns a promise that resolves with success if the key is available or failure if key is not.\r\n     */\r\n    has(key: string): Promise<any> {\r\n        let response: any;\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Deletes the password stored under given key from the keychain.\r\n     * @param key {string} the key you want to delete from keychain\r\n     * @return {Promise<any>} Returns a promise that resolves with success if the key is deleted or failure if key is not\r\n     */\r\n    delete(key: string): Promise<any> {\r\n        let response: any;\r\n        return new Promise((resolve, reject) => {\r\n            resolve(response);\r\n        });\r\n    };\r\n    /**\r\n     * Sets the language of the fingerprint dialog\r\n     * @param locale {string} locale subtag from [this list](https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry).\r\n     */\r\n    setLocale(locale: string): void {};\r\n}\r\n"]}